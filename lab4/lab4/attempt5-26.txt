`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    00:30:38 03/19/2013 
// Design Name: 
// Module Name:    vga640x480 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module vga640x480(
	input wire dclk,			//pixel clock: 25MHz
	input wire clr,			//asynchronous reset
	input wire clk,
	input wire move_left,
	input wire move_right,
	output wire hsync,		//horizontal sync out
	output wire vsync,		//vertical sync out
	output reg [2:0] red,	//red vga output
	output reg [2:0] green, //green vga output
	output reg [1:0] blue	//blue vga output
	);

// video structure constants
parameter hpixels = 800;// horizontal pixels per line
parameter vlines = 521; // vertical lines per frame
parameter hpulse = 96; 	// hsync pulse length
parameter vpulse = 2; 	// vsync pulse length
parameter hbp = 144; 	// end of horizontal back porch
parameter hfp = 784; 	// beginning of horizontal front porch
parameter vbp = 31; 		// end of vertical back porch
parameter vfp = 511; 	// beginning of vertical front porch
parameter blk_size = 32; // width 1 block

// active horizontal video is therefore: 784 - 144 = 640
// active vertical video is therefore: 511 - 31 = 480

// registers for storing the horizontal & vertical counters
reg [9:0] hc;
reg [9:0] vc;

reg clk_1hz;

integer screen[0:14][0:9];
//reg [639:0] screen [0:479]; 
// Horizontal & vertical counters --
// this is how we keep track of where we are on the screen.
// ------------------------
// Sequential "always block", which is a block that is
// only triggered on signal transitions or "edges".
// posedge = rising edge  &  negedge = falling edge
// Assignment statements can only be used on type "reg" and need to be of the "non-blocking" type: <=
//integer vert_pos = 0;
//integer hor_pos = 160;
// integer max_vert_pos = 480;

integer vert_block = 0;
integer hor_block = 3;

integer max_vert_pos [0:9];
integer c = 0;
integer i = 0;
integer j = 0;
integer curr_h_block;
integer curr_max_vert = 480;
integer v_block = 0;
integer h_block = 0;
integer vert_top_range = 0;
integer vert_bot_range = 0;
integer hor_top_range = 0;
integer hor_bot_range = 0;


initial begin
	for (i = 0; i < 15; i = i + 1)
	begin
		for (j = 0; j < 10; j = j + 1)
		begin
			screen[i][j] = 0;
		end
	end
	

end

reg [28:0] counter_1hz = 29'b0;

always @(posedge clk)
begin

	counter_1hz <= counter_1hz + 1'b1;
		
	if (counter_1hz == 29'd60000000) begin //d60000000
		clk_1hz <= ~clk_1hz;
		counter_1hz <= 29'b0;
	end

end


integer max_hor_pos = 480;
always @(posedge dclk or posedge clr)
begin
	// reset condition
	if (clr == 1)
	begin
		hc <= 0;
		vc <= 0;
	end
	else
	begin
		// keep counting until the end of the line
		if (hc < hpixels - 1)
			hc <= hc + 1;
		else
		// When we hit the end of the line, reset the horizontal
		// counter and increment the vertical counter.
		// If vertical counter is at the end of the frame, then
		// reset that one too.
		begin
			hc <= 0;
			if (vc < vlines - 1)
				vc <= vc + 1;
			else
			begin
				vc <= 0;

				
			end
		end
		
	end
end

// generate sync pulses (active low)
// ----------------
// "assign" statements are a quick way to
// give values to variables of type: wire
assign hsync = (hc < hpulse) ? 0:1;
assign vsync = (vc < vpulse) ? 0:1;

// display 100% saturation colorbars
// ------------------------
// Combinational "always block", which is a block that is
// triggered when anything in the "sensitivity list" changes.
// The asterisk implies that everything that is capable of triggering the block
// is automatically included in the sensitivty list.  In this case, it would be
// equivalent to the following: always @(hc, vc)
// Assignment statements can only be used on type "reg" and should be of the "blocking" type: =


// vertical movement
always @(posedge clk_1hz)
begin
	// if the next block below already has a block, save our block in this position
	// and start the next new block
	if (vert_block == 14 || screen[vert_block + 1][hor_block] == 1)
	begin
		// save position
		screen[vert_block][hor_block] = 1;
		// reset positions
		vert_block = 0;
		hor_block = 4;
	end				
	// else, incremenet the block
	else
	begin
		vert_block = vert_block + 1;
	end
end


// horizontal movement
//always @(posedge clk_1hz or posedge move_left or posedge move_right)
//begin
//	// vertical movement + reset
//	if (clk_1hz == 1)
//	begin
//		if (vert_block == 14 || screen[vert_block + 1][hor_block] == 1)
//		begin
//			// save position
//			screen[vert_block][hor_block] = 1;
//			// reset positions
//			vert_block = 0;
//			hor_block = 4;
//		end				
//		// else, incremenet the block
//		else
//		begin
//			vert_block = vert_block + 1;
//		end
//	end
//	// horizontal movement
//	// at the rightmost edge
//	else if (move_right == 1)
//	begin
//		if (hor_block == 9 || screen[vert_block][hor_block + 1] == 1)
//		begin
//			// don't move right
//			hor_block = hor_block;
//		end
//		else
//		begin
//			// move one block right
//			hor_block = hor_block + 1;
//		end
//	end
//	else // move left
//	begin
//		if (hor_block == 0 || screen[vert_block][hor_block - 1] == 1)
//		begin
//			// don't move left
//			hor_block = hor_block;
//		end
//		else
//		begin
//			// move left one block
//			hor_block = hor_block - 1;
//		end
//	end
//	
//end

always @(*)
begin

			// show everything that has screen[i][j] = 1
			// if vc and hc are in a block that has 1



		// first check if we're within vertical active video range
		if (vc >= vbp && vc < vfp)
		begin
			// now display different colors every 80 pixels
			// while we're within the active horizontal range
			// -----------------
			// display white bar
			// in gameboard
			if (hc >= (hbp+160) && hc < (hbp+480))
			begin
			
			
				// showing active square
				vert_bot_range = (vert_block * 32) + 0 + vbp;
				vert_top_range = vert_bot_range + 64;
				
				hor_bot_range = (hor_block * 32) + 160 + hbp;
				hor_top_range = hor_bot_range + 64;
				// moving square
				if (vc >= vert_bot_range && vc < vert_top_range && hc >= hor_bot_range && hc < hor_top_range)
				begin
						red = 3'b010;
						green = 3'b110;
						blue = 2'b11;
				end
				// background of gameboard + saved objects
				else
				begin
					// calculate current block from pixel we are displaying
//					v_block = (vc - vbp) / 32;
//					h_block = (hc - hbp - 160) / 32;
//					
//					if (0 <= vc + vbp <= 32 && 160 <= hc + hbp <= 192)
//					begin
//						v_block = 9;
//						h_block = 3;
//					end
//					else
//					begin
//						v_block = 0;
//						h_block = 0;
//					end
//					
//					
//					if (screen[v_block][h_block] == 1)
//					begin
//						// dsplay square cyan
//						red = 3'b110;
//						green = 3'b110;
//						blue = 2'b11;
//					end
//					else
//					begin
						//color white
						red = 3'b111;
						green = 3'b111;
						blue = 2'b11;
//					end
				end
			end
			// we're outside active horizontal range so display black
			else
			begin
				red = 0;
				green = 0;
				blue = 0;
			end
			
			//display square
		end
		// we're outside active vertical range so display black
		else
		begin
			red = 0;
			green = 0;
			blue = 0;
		end
			
end

endmodule
